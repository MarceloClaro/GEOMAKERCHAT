import os
import streamlit as st
from crewai import Agent, Task, Crew, Process
from langchain_groq import ChatGroq
from langchain.chains.conversation.memory import ConversationBufferWindowMemory
from crewai_tools import DuckDuckGoSearchRun

import toml
import time  # Para adicionar um pequeno atraso entre as solicita√ß√µes

# Carregar a chave de API do Groq do arquivo secrets.toml
secrets = toml.load("secrets.toml")
groq_api_key = secrets["GROQ_API_KEY"]

def main():
    st.set_page_config(page_icon="üí¨", layout="wide", page_title="Interface de Chat Avan√ßado com RAG")
    st.image("Untitled.png", width=100)
    st.title("Bem-vindo ao Chat Geomaker Avan√ßado com RAG!")
    st.write("Este chatbot utiliza um modelo avan√ßado que combina gera√ß√£o de linguagem com recupera√ß√£o de informa√ß√µes.")

    st.sidebar.title('Customiza√ß√£o')
    primary_prompt = st.sidebar.text_input("Prompt do sistema principal", "Como posso ajudar voc√™ hoje?")
    secondary_prompt = st.sidebar.text_input("Prompt do sistema secund√°rio", "H√° algo mais em que posso ajudar?")
    model_choice = st.sidebar.selectbox("Escolha um modelo", ["llama3-70b-8192", "llama3-8b-8192", "mixtral-8x7b-32768", "gemma-7b-it"])
    conversational_memory_length = st.sidebar.slider('Tamanho da mem√≥ria conversacional', 1, 50, value=5)

    memory = ConversationBufferWindowMemory(k=conversational_memory_length, memory_key="chat_history", return_messages=True)
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []

    search_tool = DuckDuckGoSearchRun()

    researcher = Agent(
        role="Pesquisador S√™nior",
        goal="Descubra as tr√™s principais not√≠cias de renderiza√ß√£o em {topic}",
        verbose=True,
        memory=True,
        backstory=(
            """
            Como assistente de pesquisa dedicado a descobrir as tend√™ncias mais impactantes, voc√™ √© movido por uma curiosidade implac√°vel e um compromisso com a inova√ß√£o. Sua fun√ß√£o envolve aprofundar-se nos desenvolvimentos mais recentes em v√°rios setores para identificar e analisar as principais not√≠cias de tend√™ncia em qualquer campo. Essa busca n√£o apenas satisfaz sua sede de conhecimento, mas tamb√©m permite que voc√™ contribua com insights valiosos que podem potencialmente remodelar entendimentos e expectativas em escala global.
            """
        ),
        tools=[search_tool],
        allow_delegation=True,
        llm=ChatGroq(groq_api_key=groq_api_key, model_name=model_choice)
    )

    blog_writer = Agent(
        role="Escritor Especialista",
        goal="Escrever conte√∫dos envolventes sobre {topic}",
        verbose=True,
        memory=True,
        backstory=(
            """
            Armado com o talento para destilar assuntos complexos em hist√≥rias diger√≠veis e envolventes, voc√™, como escritor de blog, tece habilmente narrativas que tanto iluminam quanto envolvem seu p√∫blico. Sua escrita ilumina novas percep√ß√µes e descobertas, tornando-as acess√≠veis a todos. Atrav√©s de sua arte, voc√™ traz √† tona a ess√™ncia de novos desenvolvimentos em diversos t√≥picos, tornando o intricado mundo das not√≠cias uma jornada fascinante para seus leitores.
            """
        ),
        tools=[search_tool],
        allow_delegation=False,
        llm=ChatGroq(groq_api_key=groq_api_key, model_name=model_choice)
    )

    research_task = Task(
        description=(
            """
            Identificar a pr√≥xima grande tend√™ncia em {topic}.
            Concentre-se em identificar pr√≥s e contras e a narrativa geral.
            Seu relat√≥rio final deve articular claramente os principais pontos, suas oportunidades de mercado e riscos potenciais.
            """
        ),
        expected_output="Um relat√≥rio abrangente de 3 par√°grafos sobre o {topic}",
        tools=[search_tool],
        agent=researcher
    )

    write_task = Task(
        description=(
            """
            Compor um artigo perspicaz sobre {topic}.
            Concentre-se nas √∫ltimas tend√™ncias e como elas est√£o impactando a ind√∫stria.
            Este artigo deve ser de f√°cil compreens√£o, envolvente e positivo.
            """
        ),
        expected_output="Um artigo de 4 par√°grafos sobre os avan√ßos {topic} formatado como markdown traduzido em portugu√™s.",
        tools=[search_tool],
        agent=blog_writer,
        aync_execution=False,
        output_file="blog-post.md"
    )

    crew = Crew(
        agents=[researcher, blog_writer],
        tasks=[research_task, write_task],
        process=Process.sequential
    )

    user_question = st.text_input("Fa√ßa uma pergunta:")
    if user_question:
        current_prompt = secondary_prompt if 'last_prompt' in st.session_state and st.session_state.last_prompt == primary_prompt else primary_prompt
        st.session_state.last_prompt = current_prompt

        prompt = ChatPromptTemplate.from_messages([
            SystemMessage(content=current_prompt),
            MessagesPlaceholder(variable_name="chat_history"),
            HumanMessagePromptTemplate.from_template("{human_input}")
        ])

        conversation = LLMChain(llm=groq_chat, prompt=prompt, memory=memory)
        response = conversation.predict(human_input=user_question)
        message = {'human': user_question, 'AI': response}
        st.session_state.chat_history.append(message)
        st.write("Chatbot:", response)
        st.image("eu.ico", width=100)
        st.write("""
        Projeto Geomaker + IA 
        - Professor: Marcelo Claro.
        Contatos: marceloclaro@gmail.com
        Whatsapp: (88)981587145
        Instagram: https://www.instagram.com/marceloclaro.geomaker/
        """)    

if __name__ == "__main__":
    main()
