import os
import streamlit as st
from crewai import Agent, Task, Crew, Process
from langchain_groq import ChatGroq
from langchain.chains.conversation.memory import ConversationBufferWindowMemory
from crewai_tools import DuckDuckGoSearchRun

import toml
import time

# Carregar a chave de API do Groq do arquivo secrets.toml
secrets = toml.load("secrets.toml")
groq_api_key = secrets["GROQ_API_KEY"]

def main():
    st.set_page_config(page_icon="üí¨", layout="wide", page_title="Interface de Chat Avan√ßado com RAG")
    st.image("Untitled.png", width=100)
    st.title("Bem-vindo ao Chat Geomaker Avan√ßado com RAG!")
    st.write("Este chatbot utiliza um modelo avan√ßado que combina gera√ß√£o de linguagem com recupera√ß√£o de informa√ß√µes.")

    st.sidebar.title('Customiza√ß√£o')
    primary_prompt = st.sidebar.text_input("Prompt do sistema principal", "Como posso ajudar voc√™ hoje?")
    secondary_prompt = st.sidebar.text_input("Prompt do sistema secund√°rio", "H√° algo mais em que posso ajudar?")
    model_choice = st.sidebar.selectbox("Escolha um modelo", ["llama3-70b-8192", "llama3-8b-8192", "mixtral-8x7b-32768", "gemma-7b-it"])
    conversational_memory_length = st.sidebar.slider('Tamanho da mem√≥ria conversacional', 1, 50, value=5)

    memory = ConversationBufferWindowMemory(k=conversational_memory_length, memory_key="chat_history", return_messages=True)
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []

    search_tool = DuckDuckGoSearchRun()
    groq_chat = ChatGroq(api_key=groq_api_key, model_name=model_choice)

    researcher = Agent(
        role="Pesquisador S√™nior",
        goal="Descubra as tr√™s principais not√≠cias sobre {topic}",
        verbose=True,
        memory=True,
        backstory=(
            "Como assistente de pesquisa dedicado a descobrir as tend√™ncias mais impactantes, voc√™ √© movido por uma curiosidade implac√°vel e um compromisso com a inova√ß√£o. Sua fun√ß√£o envolve aprofundar-se nos desenvolvimentos mais recentes em v√°rios setores para identificar e analisar as principais not√≠cias de tend√™ncia em qualquer campo. Essa busca n√£o apenas satisfaz sua sede de conhecimento, mas tamb√©m permite que voc√™ contribua com insights valiosos que podem potencialmente remodelar entendimentos e expectativas em escala global."
        ),
        tools=[search_tool],
        allow_delegation=True,
        llm=groq_chat
    )

    write_task = Task(
        description=(
            "Componha um artigo informativo sobre {topic}."
            "Concentre-se nas √∫ltimas tend√™ncias e em como elas est√£o impactando a ind√∫stria."
            "Este artigo deve ser f√°cil de entender, envolvente e positivo."
        ),
        expected_output="Um artigo de 4 par√°grafos sobre os avan√ßos de {topic} formatado como markdown traduzido para o portugu√™s.",
        tools=[search_tool],
        agent=researcher,
        async_execution=False,
        output_file="blog-post.md"
    )

    crew = Crew(
        agents=[researcher],
        tasks=[write_task],
        process=Process.sequential
    )

    user_question = st.text_input("Fa√ßa uma pergunta:")
    if user_question:
        current_prompt = secondary_prompt if 'last_prompt' in st.session_state and st.session_state.last_prompt == primary_prompt else primary_prompt
        st.session_state.last_prompt = current_prompt

        prompt = f"{current_prompt} {user_question}"
        conversation = ChatGroq(api_key=groq_api_key, model_name=model_choice)
        response = conversation.predict(prompt)
        st.write("Chatbot:", response)

if __name__ == "__main__":
    main()
